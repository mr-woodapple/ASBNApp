@page "/settings"

@inject NavigationManager navigationManager;
@inject IASBNDataService dataService;
@inject ISnackbar Snackbar

@using ASBNApp.Frontend.Data;


<PageTitle>Settings</PageTitle>

<MudContainer Class="mt-5 mb-15" MaxWidth="MaxWidth.ExtraExtraLarge">

    <MudItem Elevation="0" Class="my-10">
        <MudText Typo="Typo.h3" Class="mb-5">Settings</MudText>
        <MudText Typo="Typo.subtitle1">Add or update your personal details here.</MudText>
    </MudItem>

    <MudPaper Outlined="true" Class="pa-5">
        <MudGrid>
            @if(settings == null)
            {
                <SettingsSkeleton />
            }
            else
            {
                @* Info message to why this is important *@
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Normal">
                        Please fill in the information below, as they're required for generating the PDF with the correct information.
                    </MudAlert>
                </MudItem>

                @* Add the users given name, surname & select the apprenticeship *@
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Class="mb-3">
                        <b>My name and apprenticeship:</b>
                    </MudText>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="@settings.GivenName" Label="Add your given name..." Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="@settings.Surname" Label="Add your surname..." Variant="Variant.Text" />
                </MudItem>

                @* Choose the apprenticeship from a pre-defined list *@
                <MudItem xs="12">
                    <MudSelect @bind-Value="@settings.Profession" Label="Select your apprenticeship:" AnchorOrigin="Origin.BottomCenter"
                                HelperText="This will be shown as your profession on your exported documents.">
                        @foreach (var entry in Data.Professions.Apprenticeships)
                        {
                            <MudSelectItem Value="@entry" />
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Class="mb-3">
                        <b>Further details:</b>
                    </MudText>

                    <MudGrid>
                        @* Add apprenticeship start date, required to calculate the current apprenticeship year *@
                        <MudItem xs="6">
                            <MudDatePicker @ref=_startDatePicker Label="Apprenticeship start date..." @bind-Date="settings.ApprenticeshipStartDate" AutoClose>
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _startDatePicker.Close(false))">Cancel</MudButton>
                                    <MudButton Color="Color.Primary" OnClick="SetToRecentStartDate">Recent start date</MudButton>
                                </PickerActions>
                            </MudDatePicker>
                        </MudItem>

                        @* Specify your legal representative (if applicable) *@
                        <MudItem xs="6">
                            <MudTextField @bind-Value="settings.LegalRepresentitive" Label="Enter your legal representitive..." Variant="Variant.Text" HelperText="Required for students below 18 years." />
                        </MudItem>

                        @* Add company name here, required for the output pdf *@
                        <MudItem xs="6">
                            <MudTextField @bind-Value="settings.Company" Label="Company name..." Variant="Variant.Text" HelperText="Name of the company you're working at." />
                        </MudItem>

                        @* Add school name here, required for the output pdf *@
                        <MudItem xs="6">
                            <MudTextField @bind-Value="settings.School" Label="School name..." Variant="Variant.Text" HelperText="Name of the school you're going to." />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }


            @* Specify your working locations and the hours for each location *@
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Class="mb-3">
                    <b>My working hours & locations:</b>
                </MudText>

                @if(!_hasLoadedWorkLocationHours)
                {
                    <WorkLocationHoursSkeleton />
                }
                else
                {
                    <WorkLocationHours @bind-workLocationHours="workLocationHours" />
                }
            </MudItem>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveData">Save</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    public Model.Settings? settings { get; set; }
    public List<WorkLocationHoursWithID> workLocationHours { get; set; } = new();
    private bool _hasLoadedWorkLocationHours;

    // Reference to the date picker
    private MudDatePicker _startDatePicker { get; set; }

    /// <summary>
    /// Start data fetching on initialization of the page.
    /// </summary>
    protected override void OnInitialized()
    {
        LoadSettingsData();
        LoadWorkLocationHoursData();
    }

    /// <summary>
    /// Fetches data for the page from the data service, updates the page if successful.
    /// </summary>
    /// <returns></returns>
    public async Task LoadSettingsData()
    {
        settings = await dataService.GetSettings();
        StateHasChanged();
    }

    // Load work location data
    public async Task LoadWorkLocationHoursData()
    {
        workLocationHours = await dataService.GetWorkLocationHours();
        _hasLoadedWorkLocationHours = true;
        StateHasChanged();
    }

    /// <summary>
    /// Handles saving the data to the applications storage.
    /// </summary>
    public async void SaveData()
    {
        if (await dataService.SaveSettings(settings) && await dataService.SaveWorkLocationHours(workLocationHours))
        {
            // Show dialog if successful
            Snackbar.Add("That's your data saved!", Severity.Success);
        }
        else
        {
            Snackbar.Add("There was an error saving you data, please try again.", Severity.Error);
        }
    }

    /// <summary>
    /// Helper message to get the current date.
    /// If we're before the 1st september, calculate year - 1 to get the last years start date.
    /// </summary>
    /// <returns>Task</returns>
    private async Task SetToRecentStartDate()
    {
        DateTime currentDate = DateTime.Now;
        DateTime septemberFirst = new DateTime(currentDate.Year, 9, 1);

        var year = currentDate > septemberFirst
            ? currentDate.Year
            : currentDate.Year - 1;

        await _startDatePicker.GoToDate(DateTime.Parse($"01-09-{year}"));
        _startDatePicker.Close();
    }
}
