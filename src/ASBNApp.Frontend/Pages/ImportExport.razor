@page "/import"

@inject IASBNDataService dataService;
@inject IJSRuntime js;

@using ASBNApp.Frontend.Enums;
@using System.Text.Json;
@using System.IO;
@using System.Text

<PageTitle>Import / Export | ASBN App</PageTitle>


<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraExtraLarge">

	@* Header space *@
	<MudItem Elevation="0" Class="my-10">
		<MudText Typo="Typo.h3" Class="mb-5">Import & Export</MudText>
		<MudText Typo="Typo.subtitle1">Import .json files from the legacy version (or export to .json).</MudText>
	</MudItem>

	<MudGrid Elevation="0" Spacing="6">

		@* Import *@
		<MudItem xs="6">
			<MudPaper Elevation="0" Outlined Class="pa-5">
				<MudText Typo="Typo.h6">Import</MudText>
				<MudText>Upload a file to get started!</MudText>

				@* TODO: Add a checkbox to use a legacy importer, that converts the entries from the legacy ASBN app *@
				<MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="SelectFile">
					<ActivatorContent>
						<MudButton Variant="Variant.Filled"
						Color="Color.Primary"
						StartIcon="@Icons.Material.Filled.AttachFile">
							@if (File != null)
							{
								<MudText>Selected File: @File.Name</MudText>
							}
							else 
							{
								<MudText>Select File</MudText>
							}
							
						</MudButton>
					</ActivatorContent>
				</MudFileUpload>
				

				<MudText>Select what you want to import:</MudText>
				<MudCheckBox @bind-Value="_importEntries" Label="Entries" Color="Color.Primary" Disabled="_importEntriesDisabled" />
				<MudCheckBox @bind-Value="_importSettings" Label="Settings" Color="Color.Primary" Disabled="_importSettingsDisabled" />
				<MudCheckBox @bind-Value="_importWorkLocations" Label="Work Locations" Color="Color.Primary" Disabled="_importWorkLocationsDisabled" />

				<MudButton Disabled="@_isImportButtonDisabled" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="Import">
					@if (_isImporting)
					{
						<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
						<MudText Class="ms-2">@_importStatus</MudText>
					}
					else
					{
						<MudText>Import Selected File</MudText>
					}
				</MudButton>



				<MudAlert Severity="Severity.Info">Please be aware that existing entries & locations won't be overriden with imported data.</MudAlert>

			</MudPaper>
		</MudItem>

		@* Export *@
		<MudItem xs="6">
			<MudPaper Elevation="0" Outlined Class="pa-5">
				<MudText Typo="Typo.h6">Export</MudText>
				<MudText>Select what you want to export:</MudText>

				<MudCheckBox @bind-Value="_exportEntries" Label="Entries" Color="Color.Primary"></MudCheckBox>
				<MudCheckBox @bind-Value="_exportSettings" Label="Settings" Color="Color.Primary"></MudCheckBox>
				<MudCheckBox @bind-Value="_exportWorkLocations" Label="Work Locations" Color="Color.Primary"></MudCheckBox>

				<MudButton Disabled="@_isExporting" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudDownload" OnClick="Export">
					@if (_isExporting)
					{
						<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
						<MudText Class="ms-2">@_exportStatus</MudText>
					}
					else
					{
						<MudText>Export Data</MudText>
					}
				</MudButton>
			</MudPaper>
		</MudItem>
	</MudGrid>

</MudContainer>



@code {
	IBrowserFile? File { get; set; }

	private bool _exportEntries = true;
	private bool _exportSettings = true;
	private bool _exportWorkLocations = true;

	private bool _isExporting = false;
	private string _exportStatus = "Exporting...";

	private bool _importEntries = true;
	private bool _importEntriesDisabled = true;
	private bool _importSettings = true;
	private bool _importSettingsDisabled = true;
	private bool _importWorkLocations = true;
	private bool _importWorkLocationsDisabled = true;

	private bool _selectedFile = false;
	private bool _isImportButtonDisabled = true;
	private bool _isImporting = false;
	private string _importStatus = "Importing...";

	private JSONDataWrapper? importData { get; set; }

	// Import: 
	// 1. Select import
	// 2. upload file
	// 3. Import data
	private async Task SelectFile(IBrowserFile file)
	{
		File = file;
		using var stream = file.OpenReadStream();
		using var reader = new StreamReader(stream);
		var fileContent = await reader.ReadToEndAsync();

		var options = new JsonSerializerOptions
			{
				PropertyNameCaseInsensitive = true // Optional: allows case-insensitive property matching
			};
		importData = JsonSerializer.Deserialize<JSONDataWrapper>(fileContent, options);


		_importEntriesDisabled = importData.Data == null ? true : false;
		_importSettingsDisabled = importData.Settings == null ? true : false;
		_importWorkLocationsDisabled = importData.WorkLocationHours == null ? true : false;
		_isImportButtonDisabled = false;
	}

	private async Task Import()
	{
		if (importData == null)
		{
			return;
		}

		_isImporting = true;

		importData.importEntries = _importEntries;
		importData.importSettings = _importSettings;
		importData.importWorkLocations = _importWorkLocations;

		// select which data to import after selecting the file
		var result = await dataService.ImportData(importData);

		_isImporting = false;
	}



	/// <summary>
	/// tba
	/// </summary>
	/// <returns></returns>
	private async Task Export()
	{
		_exportStatus = "Downloading data...";

		var export = new JSONDataWrapper();
		if (_exportWorkLocations)
		{
			export.WorkLocationHours = await dataService.GetWorkLocationHours();
		}

		if (_exportSettings)
		{
			export.Settings = await dataService.GetSettings();
		}

		if (_exportEntries)
		{
			export.Data = await dataService.GetAllEntries();
		}

		_exportStatus = "Assembling file...";

		var json = JsonSerializer.Serialize(export);
		byte[] file = System.Text.Encoding.UTF8.GetBytes(json);
		
		var fileName = $"ASBNApp_Data_Export_{DateTime.Today.ToString("d")}.json";
		var contentType = "application/json";
		await js.InvokeVoidAsync("DownloadFileFromStream", fileName, contentType, file);
	}
}
