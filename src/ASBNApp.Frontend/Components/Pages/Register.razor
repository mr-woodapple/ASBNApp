@page "/register"
@layout IndexLayout

@inject IAccountManagement Acct

@using ASBNApp.Frontend.Model.Identity
@using ASBNApp.Frontend.Services;
@using System.Text.Json


<MudContainer Class="mt-5">

	<MudPaper Outlined Class="pa-10">

		<MudText Typo="Typo.h3" Class="mb-5">Create your account!</MudText>
		<MudText Typo="Typo.subtitle1">Get started by creating your account now.</MudText>

		<MudItem Class="my-10">
			<EditForm Model="registerAccountModel">
				<DataAnnotationsValidator />
				<MudTextField @bind-Value="registerAccountModel.Email" Label="E-Mail *" Variant="Variant.Text" InputType="InputType.Email" For="@(() => registerAccountModel.Email)"/>
				
				
				<MudTextField @bind-Value="registerAccountModel.Password" Label="Password *" Variant="Variant.Text" InputType="_passwordInputType" For="@(() => registerAccountModel.Password)"
						Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordInputMode" AdornmentAriaLabel="Show Password" />


				<MudTextField @bind-Value="registerAccountModel.PasswordRepeated" Label="Repeat Password *" Variant="Variant.Text" InputType="_passwordInputType" For="@(() => registerAccountModel.PasswordRepeated)"
						Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordInputMode" AdornmentAriaLabel="Show Password" />
			</EditForm>
		</MudItem>

		<MudButton Disabled="@_isRegistering" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-5" OnClick="HandleRegistering">
			@if (_isRegistering)
			{
				<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
				<MudText Class="ms-2">Creating your account...</MudText>
			}
			else
			{
				<MudText>Create account</MudText>
			}
		</MudButton>

		<MudItem Class="mt-5">
			<MudText>
				Already have an account?
				<MudLink Href="/login" Underline="Underline.Always">Sign in here!</MudLink>
			</MudText>
		</MudItem>

		
	</MudPaper>
</MudContainer>


@code {
	private bool _isRegistering;
	RegisterAccountForm registerAccountModel = new RegisterAccountForm();

	// Variables for the password input
	private bool _isVisible;
	private InputType _passwordInputType = InputType.Password;
	private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

	/// <summary>
	/// Toggle the password input between hidden and visibile
	/// </summary>
	private void TogglePasswordInputMode()
	{
		if (_isVisible)
		{
			_isVisible = false;
			_passwordInputIcon = Icons.Material.Filled.VisibilityOff;
			_passwordInputType = InputType.Password;
		}
		else
		{
			_isVisible = true;
			_passwordInputIcon = Icons.Material.Filled.Visibility;
			_passwordInputType = InputType.Text;
		}
	}

	private async Task HandleRegistering()
	{
		_isRegistering = true;

		var data = new UserAccount()
			{
				EMail = registerAccountModel.Email,
				Password = registerAccountModel.Password
			};

		var response = await Acct.RegisterAsync(data);
		var test = await response.Content.ReadAsStringAsync();
		var res = JsonSerializer.Deserialize<RegisterAccountBadRequest>(test);
		// Show validation errors from the backend in a list

		//var testData = res.Errors["Items"][0];

		return;
	}
}
