@page "/register"

@inject IAccountManagement Acct
@inject NavigationManager navigationManager;

@using ASBNApp.Frontend.Model.Identity
@using ASBNApp.Frontend.Services;
@using System.Text.Json;


<MudContainer Class="mt-5">

	<MudPaper Outlined Class="pa-10">

		<MudText Typo="Typo.h3" Class="mb-5">Create your account!</MudText>
		<MudText Typo="Typo.subtitle1">Get started by creating your account now.</MudText>

		<MudItem Class="my-10">
			<MudForm Model="registerAccountModel" @ref="@form" Validation="@(registerAccountValidator.ValidateValue)">
				<MudTextField Label="E-Mail *" Variant="Variant.Text" InputType="InputType.Email"
							  @bind-Value="registerAccountModel.Email" For="@(() => registerAccountModel.Email)" Immediate="true"/>

				<MudTextField @bind-Value="registerAccountModel.Password" Label="Password *" Variant="Variant.Text" InputType="_passwordInputType" For="@(() => registerAccountModel.Password)"
							  Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordInputMode" AdornmentAriaLabel="Show Password" Immediate="true" />

				<MudTextField @bind-Value="registerAccountModel.PasswordRepeated" Label="Repeat Password *" Variant="Variant.Text" InputType="_passwordInputType" For="@(() => registerAccountModel.PasswordRepeated)"
							  Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordInputMode" AdornmentAriaLabel="Show Password" Immediate="true" />
			</MudForm>
		</MudItem>

		<MudItem Outlined>
			@* Show API validation errors here *@
			@if (ValidationErrors.Count > 0)
			{
				<MudStack Row AlignItems="AlignItems.Center">
					<MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
					<MudText Typo="Typo.h6">@ValidationErrors.Count error(s) occured during registration. Please fix them and try again! </MudText>
				</MudStack>
				
				@foreach (var entry in ValidationErrors)
				{
					<MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="my-2"> @entry </MudAlert>
				}
			}
		</MudItem>
		


		<MudButton Disabled="@_isRegistering" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-5" OnClick="@(async () => await HandleRegistering())">
			@if (_isRegistering)
			{
				<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
				<MudText Class="ms-2">Creating your account...</MudText>
			}
			else
			{
				<MudText>Create account</MudText>
			}
		</MudButton>

		<MudItem Class="mt-5">
			<MudText>
				Already have an account?
				<MudLink Href="/login" Underline="Underline.Always">Sign in here!</MudLink>
			</MudText>
		</MudItem>

		
	</MudPaper>
</MudContainer>


@code {
	private bool _isRegistering;
	MudForm form;
	RegisterAccountForm registerAccountModel = new RegisterAccountForm();
	RegisterAccountFluentValidator registerAccountValidator = new RegisterAccountFluentValidator();

	// Handle errors from the API
	List<string>? ValidationErrors { get; set; } = new();

	// Variables for the password input
	private bool _isVisible;
	private InputType _passwordInputType = InputType.Password;
	private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

	/// <summary>
	/// Toggle the password input between hidden and visibile
	/// </summary>
	private void TogglePasswordInputMode()
	{
		if (_isVisible)
		{
			_isVisible = false;
			_passwordInputIcon = Icons.Material.Filled.VisibilityOff;
			_passwordInputType = InputType.Password;
		}
		else
		{
			_isVisible = true;
			_passwordInputIcon = Icons.Material.Filled.Visibility;
			_passwordInputType = InputType.Text;
		}
	}

	/// <summary>
	/// 
	/// </summary>
	/// <returns></returns>
	private async Task HandleRegistering()
	{
		await form.Validate();

		if (form.IsValid)
		{
			_isRegistering = true;

			var data = new UserAccount()
				{
					EMail = registerAccountModel.Email,
					Password = registerAccountModel.Password
				};

			var response = await Acct.RegisterAsync(data);
			var jsonResponse = await response.Content.ReadAsStringAsync();

			// Show validation errors from the backend in a list
			if (!response.IsSuccessStatusCode)
			{
				var registerAccountResponse = JsonSerializer.Deserialize<RegisterAccountBadRequest>(jsonResponse);

				foreach(var error in registerAccountResponse.errors)
				{
					ValidationErrors.Add(error.Value[0]);
				}

				_isRegistering = false;
				return;
			}
			else
			{
				// Forward to login page
				navigationManager.NavigateTo("/login");

				// TODO: Make this the user login automatically!
			}			
		}
	}
}
