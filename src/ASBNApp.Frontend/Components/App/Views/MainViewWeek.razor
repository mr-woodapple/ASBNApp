@* Main view to input and edit data, displayed when the user selects the weekly view. *@

@using ASBNApp.Frontend.Helpers
@using ASBNApp.Frontend.Interfaces;
@using ASBNApp.Frontend.Models

@inject IASBNDataService dataService
@inject DateHandler dateHandler
@inject ISnackbar Snackbar


<MudPaper Outlined="true" Elevation="0" Class="my-5">
    <MudItem Class="pa-5">
        <WeekSelectorLarge @bind-SelectedWeek="SelectedWeek" @bind-SelectedYear="SelectedYear" OnCallback="RefreshView" />
    </MudItem>

    @if(rows.Count > 5)
    {
        <MudAlert Severity="Severity.Warning" Class="ma-5">
            <b>Attention: You cannot have more than 5 entries per week!</b> 
            Please make sure you only have 5 entries before you start exporting, as the output PDF can only hold 5 entries.
        </MudAlert>
    }

    @* Iterate over the rows, write an <EntryRow /> for each, bind that value to the one here *@
    @if(rows.Count == 0) {
        @for (var i = 0; i < 5; i++)
        {
            <EntryRowSkeleton />
        }
    }
    else 
    {
        @foreach (var entry in rows)
        {
            <EntryRow CurrentEntry="entry" SelectedWeek="SelectedWeek" SelectedYear="SelectedYear" WorkLocations="_workLocationHours" OnItemDeleted="RefreshView" />
        }
    }

    <MudItem xs="12" Class="pa-5">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveData">Save</MudButton>
    </MudItem>
</MudPaper>


@code {
    private List<Entry> rows = new();
    private List<WorkLocation> _workLocationHours = new();
      
    // Creates DateHandler instance & variables to pass down to child component
    public int? SelectedWeek { get; set; }
    public int? SelectedYear { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetWorkLocationHours();
    }

    /// <summary>
    /// Re-load the listed entries if the selected week changes.
    /// </summary>
    /// <returns>Task if successful.</returns>
    public async Task RefreshView()
    {
        rows = new();
        await GetDataFromWeekDates();
    }

    public async Task GetWorkLocationHours()
    {
        _workLocationHours = await dataService.GetWorkLocationHours();
        StateHasChanged();
    }

    // Update the data we have from the data then interface implementation returns
    // Will be called on initialization & once SelectedWeek or SelectedYear changes
    public async Task GetDataFromWeekDates()
    {
        // Call DataService to get the values for the matching week / year & assign to rows
        DateHandler dateHandler = new DateHandler();
        var startDate = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
        var endDate = dateHandler.GetLastDateOfWeek((int)SelectedWeek, (int)SelectedYear);

        rows = await dataService.GetWeek(startDate, endDate);

        // Add missing rows / entries
        if(rows.Count < 5)
        {
            rows = MainViewWeekHelper.GetCompleteWeek(rows, SelectedWeek, SelectedYear);
        }

        // Force update the UI
        StateHasChanged();
    }

    /// <summary>
    /// Triggers the DataService to save the edited data, also trigger
    /// alert with matching information
    /// </summary>
    private async void SaveData()
    {
        // TODO: Make this refresh if a new entry is saved.

        // TODO: Might wanna change this to check the return of dataService? 
        // if task.success, show success snackbar, if not error snackbar
        if (await dataService.SaveEntries(rows))
        {
            Snackbar.Add("That's your data saved!", Severity.Success);
        }
        else
        {
            Snackbar.Add("There was an error saving your data - please try again.", Severity.Error);
        }
    }
}