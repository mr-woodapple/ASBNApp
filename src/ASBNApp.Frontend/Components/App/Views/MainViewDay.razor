@* Main view to input and edit data, displayed when the user selects the daily view. *@

@using System.Net.Http.Json;
@using ASBNApp.Frontend.Models
@using ASBNApp.Frontend.Services;
@using ASBNApp.Frontend.Interfaces;
@using System.Text.Json

@inject ISnackbar Snackbar
@inject IASBNDataService dataService;
@inject IUnsavedContentDialogService unsavedContentDialogService;


<MudPaper Outlined="true" Class="my-5 pa-5">
	<MudGrid>
		@* Date *@
		<MudItem xs="12">
			<MudText Typo="Typo.body2">I'm writing a log for...</MudText>
			<PillSelectorDate @bind-SelectedDate="SelectedDate" />
		</MudItem>

		@* Location *@
		<MudItem xs="12" md="6">
			<MudText Typo="Typo.body2">I was working from...</MudText>
			<PillSelectorLocation WorkLocationHours="WorkLocations" @bind-SelectedLocation="SelectedWorkLocation" />
		</MudItem>

		@* Working hours *@
		<MudItem xs="12" md="6">
			<Condition Evaluation="CurrentEntry == null">
				<Match>
					<MudSkeleton Height="50px" />
				</Match>
				<NotMatch>
					<MudNumericField @bind-Value="CurrentEntry.Hours" Variant="Variant.Text" Label="I worked for..." Min="0" Format="N1" />
				</NotMatch>
			</Condition>
		</MudItem>

		@* Note *@
		<MudItem xs="12">
			<Condition Evaluation="CurrentEntry == null">
				<Match>
					<MudSkeleton Height="50px" />
				</Match>
				<NotMatch>
					<MudTextField @bind-Text="CurrentEntry.Note" T="string" Label="And I learned this today:" AutoGrow MaxLines="5" ValueChanged="@(() => unsavedContentDialogService.IsDayViewDataSaved = false)" />
				</NotMatch>
			</Condition>
		</MudItem>

		<MudItem xs="12">
			<MudButton Disabled="_isSaving" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveData">
				<Condition Evaluation="_isSaving">
					<Match>
						<MudText Class="ms-2">Saving...</MudText>
						<MudProgressCircular Class="ms-5" Size="Size.Small" Indeterminate="true" />
					</Match>
					<NotMatch>
						<MudIcon Icon="@Icons.Material.Filled.Save" />
						<MudText Class="ms-2">Save</MudText>
					</NotMatch>
				</Condition>
			</MudButton>
		</MudItem>
	</MudGrid>
</MudPaper>


@code {
	private bool _isSaving;

	private DateTime _selectedDate;
	public DateTime SelectedDate
	{
		get => _selectedDate;
		set
		{
			if (value != _selectedDate)
			{
				_selectedDate = value;
				GetData();
			}
		}
	}

	public WorkLocation? _selectedWorkLocation;
	public WorkLocation? SelectedWorkLocation
	{
		get => _selectedWorkLocation;
		set
		{
			if (value != _selectedWorkLocation)
			{
				_selectedWorkLocation = value;
				if (CurrentEntry != null && value != null)
				{
					CurrentEntry.Hours = value.SuggestedHours;
				}
			}
		}
	}

	public List<WorkLocation>? WorkLocations { get; set; }
	public Entry? CurrentEntry { get; set; }

	/// <summary>
	/// Load data for the selected date and all <see cref="WorkLocations"/>.
	/// </summary>
	public async Task GetData()
	{
		// Trigger loading state for the UI
		CurrentEntry = null;
		SelectedWorkLocation = null;

		// Important that this only happens when the list is null, because otherwise
		// the UI won't reflect the updated selected location. Seems odd, don't understand tbh.
		if (WorkLocations == null)
		{
			WorkLocations = await dataService.GetWorkLocationHours();
			StateHasChanged();
		}

		// Try to retrieve data from the API
		CurrentEntry = await dataService.GetDay(SelectedDate);

		// Set location
		if (CurrentEntry != null)
		{
			SelectedWorkLocation = WorkLocations.FirstOrDefault(l => l.Id == CurrentEntry.LocationId);
		}
		else
		{
			CurrentEntry = new Entry { Date = SelectedDate };
		}

		StateHasChanged();

		// Override the value, because it's otherwise triggered by setting the data from what the API returned.
		unsavedContentDialogService.ResetDayView();
	}

	/// <summary>
	/// Work with <see cref="IASBNDataService"/> to save the current entry,
	/// update the local object with the data the <see cref="IASBNDataService"/> returned,
	/// also trigger an alert to indicate success / error.
	/// </summary>
	public async void SaveData()
	{
		if (string.IsNullOrWhiteSpace(CurrentEntry.Note) && SelectedWorkLocation == null)  
		{  
			Snackbar.Add("Please enter a note or select a location before saving.", Severity.Warning);
			return;
		}

		_isSaving = true;
		var data = new Entry()
		{
			Id = CurrentEntry.Id,
			Hours = CurrentEntry.Hours,
			Note = CurrentEntry.Note,
			Date = SelectedDate,
			LocationId = SelectedWorkLocation?.Id ?? null
		};

		try
		{
			var response = await dataService.SaveDay(data);
			CurrentEntry = JsonSerializer.Deserialize<Entry>(await response.Content.ReadAsStringAsync());
			Snackbar.Add("That's your data saved!", Severity.Success);
			unsavedContentDialogService.IsDayViewDataSaved = true;
		}
		catch
		{
			Snackbar.Add("There was an error saving your data - please try again.", Severity.Error);
		}

		_isSaving = false;
		StateHasChanged();
	}
}