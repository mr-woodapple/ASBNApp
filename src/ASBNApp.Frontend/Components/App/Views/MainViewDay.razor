@* Main view to input and edit data, displayed when the user selects the daily view. *@

@using System.Net.Http.Json;
@inject IASBNDataService dataService;
@inject ISnackbar Snackbar

<MudPaper Outlined="true" Class="mt-5 pa-5">
    <MudGrid>

        @* Select date *@
        <MudItem xs="12">
            <MudText Typo="Typo.body2">I'm writing a log for...</MudText>
            <PillSelectorDate @bind-SelectedDate="SelectedDate" />
        </MudItem>

        @* Select location *@
        <MudItem xs="6">
            <MudText Typo="Typo.body2">I was working from...</MudText>
            <PillSelectorLocation WorkLocationHours="workLocationHours" @bind-SelectedLocation="SelectedLocation" />
        </MudItem>
        <MudItem xs="6">
            <MudNumericField @bind-Value="Hours" Variant="Variant.Text" Label="I worked for..." Min="0" Format="N1" />
        </MudItem>

        @* Add note and save *@
        <MudItem xs="12">
            <MudTextField @bind-Text="Note" T="string" Label="And I learned this today:" AutoGrow MaxLines="5" />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveData">Save</MudButton>
        </MudItem>

    </MudGrid>
</MudPaper>


@code {
    // Variables to bind the selected Date to
    private DateTime _selectedDate;
    public DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (value != _selectedDate)
            {
                _selectedDate = value;
                GetDataForDay().GetAwaiter().GetResult();
            }
        }
    }

    // Variables to bind the selected work location to
    private string? _selectedLocation = null;
    public string? SelectedLocation
    {
        get => _selectedLocation;
        set
        {
            if (value != _selectedLocation)
            {
                _selectedLocation = value;
                UpdateWorkHoursFromLocation();
            }
        }
    }

    // Variables to bind the user input to
    public float? Hours;
    public string? Note;
    public int? Id;

    List<WorkLocationHoursWithID> workLocationHours { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetWorkLocationData();
    }

    /// <summary>
    /// Get's data for the work locations from the data service, 
    /// set them for the sub components.
    /// </summary>
    public async Task GetWorkLocationData()
    {
        workLocationHours = await dataService.GetWorkLocationHours();
        StateHasChanged();
    }

    /// <summary>
    /// Pre-set the value for hours worked for the UI based on the
    /// selected workLocationHours element.
    /// </summary>
    public void UpdateWorkHoursFromLocation()
    {
        // Filter list for the matching string in SelectedLocation,
        // set corresponding hours value to Hours
        foreach (var entry in workLocationHours)
        {
            if (entry.Location == SelectedLocation) { Hours = entry.Hours; }
        }
    }

    /// <summary>
    /// Gets data for the value in SelectedDate
    /// </summary>
    public async Task GetDataForDay()
    {
        var data = await dataService.GetDay(SelectedDate);

        Id = data.Id;
        Note = data.Note;
        Hours = data.Hours;
        SelectedLocation = data.Location;

        StateHasChanged();
    }

    /// <summary>
    /// Triggers the DataService to save the edited data, also trigger
    /// alert with matching information.
    /// </summary>
    public async void SaveData()
    {
        var data = new EntryRowModelWithID()
        {
            Id = Id,
            Hours = Hours,
            Note = Note,
            Date = SelectedDate,
            Location = SelectedLocation
        };

        // why do I have to convert Hours at all? its a nullable on both ends...
        //if (await dataService.SaveDay(Note, SelectedDate, SelectedLocation, (float)Hours))
        if (await dataService.SaveDay(data))
        {
            Snackbar.Add("That's your data saved!", Severity.Success);
        }
        else
        {
            Snackbar.Add("There was an error saving your data - please try again.", Severity.Error);
        }
    }
}