@* Main view to input and edit data, displayed when the user selects the daily view. *@

@using System.Net.Http.Json;
@using ASBNApp.Frontend.Interfaces;
@using ASBNApp.Frontend.Models

@inject IASBNDataService dataService;
@inject ISnackbar Snackbar

<MudPaper Outlined="true" Class="mt-5 pa-5">
    <MudGrid>

        @* Date *@
        <MudItem xs="12">
            <MudText Typo="Typo.body2">I'm writing a log for...</MudText>
            <PillSelectorDate @bind-SelectedDate="SelectedDate" />
        </MudItem>

        @* Location *@
        <MudItem xs="6">
            <MudText Typo="Typo.body2">I was working from...</MudText>
            <PillSelectorLocation WorkLocationHours="WorkLocations" @bind-SelectedLocation="SelectedWorkLocation" />
        </MudItem>

        @* Working hours *@
        <MudItem xs="6">
            @if (CurrentEntry == null) {
                <MudSkeleton Height="50px" />
            } else {
                <MudNumericField @bind-Value="CurrentEntry.Hours" Variant="Variant.Text" Label="I worked for..." Min="0" Format="N1" />
            }
        </MudItem>

        @* Note *@
        <MudItem xs="12">
            @if (CurrentEntry == null) {
                <MudSkeleton Height="50px" />
            } else {
                <MudTextField @bind-Text="CurrentEntry.Note" T="string" Label="And I learned this today:" AutoGrow MaxLines="5" />
            }
        </MudItem>

        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveData">Save</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    private DateTime _selectedDate;
    public DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (value != _selectedDate)
            {
                _selectedDate = value;
                GetData();
            }
        }
    }

    public WorkLocation? _selectedWorkLocation;
    public WorkLocation? SelectedWorkLocation { 
        get => _selectedWorkLocation; 
        set 
        {
            if (value != _selectedWorkLocation) {
                _selectedWorkLocation = value;
                if (CurrentEntry != null && value != null)
                {
                    CurrentEntry.Hours = value.SuggestedHours;
                }
            }
        }
    }

    public List<WorkLocation>? WorkLocations { get; set; }
    public Entry? CurrentEntry { get; set; }

    /// <summary>
    /// Load data for the selected date and all <see cref="WorkLocations"/>.
    /// </summary>
    public async Task GetData() 
    {
        // Trigger loading state for the UI
        CurrentEntry = null;
        SelectedWorkLocation = null;

        // Important that this only happens when the list is null, because otherwise 
        // the UI won't reflect the updated selected location. Seems odd, don't understand tbh.
        if (WorkLocations == null)
        {
            WorkLocations = await dataService.GetWorkLocationHours();
            StateHasChanged();
        }

        // Try to retrieve data from the API
        CurrentEntry = await dataService.GetDay(SelectedDate);

        // Set location
        if (CurrentEntry != null)
        {
            SelectedWorkLocation = WorkLocations.FirstOrDefault(l => l.Id == CurrentEntry.LocationId);
        }
        else
        {
            CurrentEntry = new Entry { Date = SelectedDate };
        }

        StateHasChanged();
    }

    /// <summary>
    /// Triggers the DataService to save the edited data, also trigger
    /// alert with matching information.
    /// </summary>
    public async void SaveData()
    {
        var data = new Entry()
        {
            Id = CurrentEntry.Id,
            Hours = CurrentEntry.Hours,
            Note = CurrentEntry.Note,
            Date = SelectedDate,
            LocationId = SelectedWorkLocation.Id
        };

        if (await dataService.SaveDay(data))
        {
            Snackbar.Add("That's your data saved!", Severity.Success);
        }
        else
        {
            Snackbar.Add("There was an error saving your data - please try again.", Severity.Error);
        }
    }
}