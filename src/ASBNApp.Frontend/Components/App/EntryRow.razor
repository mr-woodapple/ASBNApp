@* UI bit that represents a single entry, supposed to be used in MainViewWeek. *@

@using ASBNApp.Frontend.Model;
@inject IASBNDataService dataService;
@inject IDialogService dialogService;


<MudPaper Outlined="true" Class="pa-5 ma-5">
    <MudGrid>
        @* Name of the day *@
        <MudItem xs="3">
            <MudText Typo="Typo.h4"> @Entry.Date.DayOfWeek </MudText>
        </MudItem>

        @* Date picker *@
        <MudItem xs="3">
            <MudDatePicker Label="Date" @bind-Date="date" MinDate="@_minDateValue" MaxDate="@_maxDateValue" />
        </MudItem>

        @* Location selector *@
        <MudItem xs="3">
            @if (workLocationHours.Count != 0)
            {
                <MudSelect T="string" Value="Entry.Location" Label="Select Location" AnchorOrigin="Origin.BottomCenter" ValueChanged="@UpdateWorkHoursFromLocation">
                    @foreach (var entry in workLocationHours)
                    {
                        <MudSelectItem Value="entry.Location"/>
                    }                    
                </MudSelect>
            }
            else 
            {
                <MudAlert Severity="Severity.Warning" Dense="true">
                    No data available, please add new work location in settings.
                    <MudLink Href="settings" Underline="Underline.Always" Typo="Typo.body2">Settings Page</MudLink>
                </MudAlert>
            }
        </MudItem>

        @* Location hours input *@
        <MudItem xs="3">
            <MudStack Row>
                <MudNumericField @bind-Value="Entry.Hours" Label="Select hours" Min="0" Format="N1" />
                
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.CenterRight">
                    @if(!string.IsNullOrWhiteSpace(Entry.Note))
                    {
                        <MudMenuItem OnClick="DeleteEntry">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete" />
                                <MudText Typo="Typo.button" Class="ps-4">Delete entry</MudText>
                            </div>
                        </MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem Disabled>
                            <MudText>No action available.</MudText>
                        </MudMenuItem>
                    }
                </MudMenu>
            </MudStack>
        </MudItem>

        @* Text *@
        <MudItem xs="12">
            <MudTextField T="string" @bind-Text="Entry.Note" Label="And I learned this today:" AutoGrow Lines="3" MaxLines="5" />
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    [Parameter]
    public List<WorkLocationWithID> workLocationHours { get; set; }

    // Dealing with two way binding
    [Parameter]
    public EntryRowModelWithID Entry { get; set; }
    [Parameter]
    public EventCallback<int> OnItemDeleted { get; set; }


    // Week & year variables to set min and max values for the date picker
    private int? _selectedWeek;
    [Parameter]
    public int? SelectedWeek
    {
        get => _selectedWeek;
        set
        {
            _selectedWeek = value;
            UpdateMinMaxDates();
        }
    }

    private int? _selectedYear;
    [Parameter]
    public int? SelectedYear
    {
        get => _selectedYear;
        set
        {
            _selectedYear = value;
            UpdateMinMaxDates();
        }
    }


    private DateTime _date;
    private DateTime? date 
    { 
        get => _date; 
        set 
        {
            _date = (DateTime)value;
            Entry.Date = (DateTime)value;
        }
    }
    DateHandler dateHandler = new DateHandler();

    // Min & max values for the date picker.
    private DateTime? _minDateValue;
    private DateTime? _maxDateValue;


    protected override void OnInitialized()
    {
        UpdateMinMaxDates();
        UpdateWorkHoursFromLocation(Entry.Location);
    }

    /// <summary>
    /// Show confirmation dialog, if user confirms this calls the dataService to 
    /// delete the entry and then update the local list of Entries.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteEntry()
    {
        var dialogCancelled = await OpenConfirmationDialogAsync();
        if (dialogCancelled) { return; }

        bool success = await dataService.DeleteDay(Entry.Id);
        if (success)
        {
            OnItemDeleted.InvokeAsync((int)Entry.Id);
        }
    }

    /// <summary>
    /// Handles creating a confirmation dialog, returns the result as bool.
    /// </summary>
    /// <returns>True if the user cancelled the popup, false if not.</returns>
    private async Task<bool> OpenConfirmationDialogAsync()
    {
        var parameters = new DialogParameters<DialogTemplate>
        {
            { x => x.ContentText, $"Do you really want to delete the entry for {Entry.Date.DayOfWeek} ({Entry.Date.ToShortDateString()})? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await dialogService.ShowAsync<DialogTemplate>("Delete entry?", parameters, options);
        var result = await dialog.Result;
        return result.Canceled;
    }

    /// <summary>
    /// Updates min and max dates for the date picker in a given week.
    /// </summary>
    private void UpdateMinMaxDates()
    {
        if (SelectedWeek != null && SelectedYear != null)
        {
            date = Entry.Date;

            // set values for min and max in the date picker
            _minDateValue = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
            _maxDateValue = dateHandler.GetLastDateOfWeek((int)SelectedWeek, (int)SelectedYear);
        }
    }

    /// <summary>
    /// Pre-define the hours value for input UI fields based on the selected work location.
    ///
    /// Filter list for the matching string in SelectedLocation, then set corresponding hours value to Hours
    /// </summary>
    public void UpdateWorkHoursFromLocation(string? location) {
        if (!string.IsNullOrEmpty(location))
        {
            foreach (var item in workLocationHours)
            {
                if (location == item.Location)
                {
                    Entry.Location = item.Location;
                    Entry.Hours = item.Hours;
                    StateHasChanged();
                }
            }
        }
        
    }
}