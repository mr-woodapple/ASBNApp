@* Large picker to select the week we want to edit. *@

<MudItem>
    <MudStack Row="true" Justify="Justify.Center" >
        <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" Color="Color.Primary" OnClick=@(() => firstDateOfAWeek = firstDateOfAWeek?.AddDays(-7)) />

        <MudStack Row="true" Class="mud-theme-primary rounded-pill ps-5" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.subtitle1" Class="m-0"><b>Selected Week: </b>@SelectedWeek of @SelectedYear</MudText>

            <MudIconButton Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Inherit" OnClick="OpenDatePickerOverlay" />
        </MudStack>

        <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" Color="Color.Primary" OnClick=@(() => firstDateOfAWeek = firstDateOfAWeek?.AddDays(7)) />
    </MudStack>

    <MudOverlay @bind-Visible="isDatePickerOverlayVisible" DarkBackground="true" AutoClose="true">
        <MudDatePicker @ref="_picker" PickerVariant="PickerVariant.Static" @bind-Date="firstDateOfAWeek" ShowWeekNumbers="true">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => CancelPicker())">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => SetPickerToCurrentWeek())">Current week</MudButton>
            </PickerActions>
        </MudDatePicker>
    </MudOverlay>
</MudItem>


@code {
    [Parameter]
    public int? SelectedWeek { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedWeekChanged { get; set; }
    [Parameter]
    public int? SelectedYear { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedYearChanged { get; set; }
    [Parameter]
    public Func<Task> OnCallback { get; set; }

    DateHandler dateHandler = new DateHandler();


    // Logic & variables related to openening and closing the date picker overlay
    private bool isDatePickerOverlayVisible;
    public void OpenDatePickerOverlay()
    {
        isDatePickerOverlayVisible = true;
        StateHasChanged();
    }

    // Making the MudDatePicker work (& updating variables)
    MudDatePicker _picker;
    DateTime? _date;
    DateTime? firstDateOfAWeek
    { 
        get => _date;
        set {
            // Ensure we have the first date of a given week before setting it.
            int week = dateHandler.GetWeekOfYear((DateTime)value);
            DateTime dateToSet = dateHandler.GetFirstDateOfWeek(week, ((DateTime)value).Year);
            _date = dateToSet;
            isDatePickerOverlayVisible = false;

            SelectedWeek = dateHandler.GetWeekOfYear(dateToSet);
            SelectedYear = dateToSet.Year;
            TriggerAllCallbacks(SelectedWeek, SelectedYear);
        }
    }

    // Use onInitialized() to assign calculated values to the matching variables, avoids data not being loaded into memory
    // Also make sure to update the week number on the parent component
    protected override void OnInitialized()
    {
        SelectedWeek = dateHandler.GetCurrentWeekOfYear();
        SelectedYear = DateTime.Now.Year;

        // Set value for the date picker
        firstDateOfAWeek = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
    }

    // Single place to trigger the callbacks
    public async void TriggerAllCallbacks(int? week, int? year)
    {
        await SelectedWeekChanged.InvokeAsync(week);
        await SelectedYearChanged.InvokeAsync(year);
        await OnCallback.Invoke(); // Callback to the parent component
    }

    public void CancelPicker() {
        _picker.CloseAsync(false);
        isDatePickerOverlayVisible = false;
    }

    public void SetPickerToCurrentWeek() {
        _picker.CloseAsync();
        firstDateOfAWeek = DateTime.Now;
    }
}