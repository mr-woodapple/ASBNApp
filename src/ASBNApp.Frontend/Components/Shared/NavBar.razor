@* Nav Bar item *@

@using ASBNApp.Frontend.Enums
@using ASBNApp.Frontend.Models
@using ASBNApp.Frontend.Services;
@using ASBNApp.Frontend.Interfaces;

@inject LayoutService LayoutService
@inject IAccountManagement AccManagement
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudAppBar>
	<AuthorizeView>
		<NotAuthorized>
			<MudImage Src="images/Logo-Rect-Grey-Dark.png" Width="100" Alt="ASBN App Logo" />
		</NotAuthorized>

		<Authorized>
			<MudLink Href="/app">
				<MudImage Src="images/Logo-Rect-Grey-Dark.png" Width="100" Alt="ASBN App Logo" />
			</MudLink>

			<MudSpacer />

			@if (_showHomeIcon)
			{
				<MudTooltip Text="Home">
					<MudIconButton Href="/app" Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" aria-label="Start page" />
				</MudTooltip>
			}

			@* Tools menu *@
			<MudTooltip Text="Tools">
				<MudMenu Icon="@Icons.Material.Filled.Apps" Color="Color.Inherit" Class="ma-2"
						 AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
					<MudItem Class="ma-3">
						<MudText Typo="Typo.h6" Align="Align.Center">Tools:</MudText>
						<MudItem Class="my-5" />

						<MudMenuItem Href="export" Icon="@Icons.Custom.FileFormats.FileDocument" IconColor="Color.Inherit">
							<MudStack Class="ps-5" Spacing="1">
								<MudText Typo="Typo.subtitle1">Export to PDF</MudText>
								<MudText Typo="Typo.body2">Generate PDF files from your entries.</MudText>
							</MudStack>
						</MudMenuItem>
						<MudMenuItem Href="import" Icon="@Icons.Material.Filled.DataObject" IconColor="Color.Inherit">
							<MudStack Class="ps-5" Spacing="1">
								<MudText Typo="Typo.subtitle1">Import / Export</MudText>
								<MudText Typo="Typo.body2">Import or export your data to/from JSON files.</MudText>
							</MudStack>
						</MudMenuItem>
					</MudItem>
				</MudMenu>
			</MudTooltip>

			@* Account & user preferences menu *@
			<MudTooltip Text="Account & Preferences">
				<MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit"
						 AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
					<MudItem Class="ma-3">
						<MudPaper Outlined Class="pa-3 mb-5">
							<MudText Typo="Typo.h6" Align="Align.Center">Hi there!</MudText>
							<MudText Class="mt-2"> You're logged in using @_email. </MudText>
						</MudPaper>

						<MudMenuItem Icon="@DarkLightModeButtonIcon" IconColor="Color.Inherit" OnClick="LayoutService.CycleDarkLightModeAsync">
							<MudText> @DarkLightModeButtonText </MudText>
							<MudText Typo="Typo.caption">Click to cycle modes.</MudText>
						</MudMenuItem>

						<MudDivider />

						<MudMenuItem Href="settings" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Inherit">Account Settings</MudMenuItem>
						<MudMenuItem OnClick="HandleLogout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">
							<MudText Inline Color="Color.Error">Logout</MudText>
						</MudMenuItem>
					</MudItem>
				</MudMenu>
			</MudTooltip>
		</Authorized>
	</AuthorizeView>
</MudAppBar>


@code
{
	private string? _email;
	private bool _showHomeIcon = false;
	public string DarkLightModeButtonText => LayoutService.CurrentDarkLightMode switch
	{
		DarkLightMode.Dark => "Dark mode",
		DarkLightMode.Light => "Light mode",
		_ => "System mode"
	};
	public string DarkLightModeButtonIcon => LayoutService.CurrentDarkLightMode switch
	{
		DarkLightMode.Dark => Icons.Material.Rounded.DarkMode,
		DarkLightMode.Light => Icons.Material.Outlined.LightMode,
		_ => Icons.Material.Filled.AutoMode
	};

	/// <summary>
	/// Get the email of the current user.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_email = authState.User.Identity.Name;

		UpdateHomeIconVisibility();
		NavigationManager.LocationChanged += HandleURIChanged;
	}

	private async Task HandleLogout()
	{
		await AccManagement.LogoutAsync();
		NavigationManager.NavigateTo("/");
	}

	private void HandleURIChanged(object? sender, LocationChangedEventArgs e)
	{
		UpdateHomeIconVisibility();
	}

	private async Task UpdateHomeIconVisibility()
	{
		_showHomeIcon = !NavigationManager.Uri.EndsWith("/app");
		StateHasChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= HandleURIChanged;
	}
}