@* Component to show location & working hours for all entries of WorkLocationHours,
also manage editing states & update parent component if necessary. *@

@using System.Text.Json
@using ASBNApp.Frontend.Models;
@using ASBNApp.Frontend.Interfaces;

@inject IASBNDataService dataService;
@inject ISnackbar Snackbar;


<MudPaper Elevation="0" Class="mb-5">

    <MudGrid>
        @foreach(var entry in workLocationHours)
        {
            <MudItem xs="6" md="7">
                <MudTextField Dense @bind-Value="entry.LocationName" Label="Work location:" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="@entry.SuggestedHours" Variant="Variant.Outlined" Label="Suggested working hours:" Min="0" Format="N1" HideSpinButtons />
            </MudItem>
            <MudItem xs="2" md="1">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => DeleteWorkLocationHoursEntry(entry))" />
            </MudItem>
        }

        @* Additional rows to add data: *@
        <MudItem xs="6" md="7">
            <MudTextField @ref=NewLocationTextField @bind-Value="_newWorkLocation" Label="Add new work location..." />
        </MudItem>
        <MudItem xs="4">
            <MudNumericField @bind-Value="_newSuggestedHours" Variant="Variant.Text" Label="Add suggested hours..." Min="0" Format="N1" HideSpinButtons />
        </MudItem>
        <MudItem xs="2" md="1">
            <MudIconButton Icon="@Icons.Material.Rounded.Add" Color="Color.Primary" Variant="Variant.Filled" aria-label="delete" OnClick="AddNewWorkLocationHoursEntry" />
        </MudItem>
    </MudGrid>

</MudPaper>


@code {
    [Parameter]
    public List<WorkLocation>? workLocationHours { get; set; }
    [Parameter]
    public EventCallback<List<WorkLocation>?> WorkLocationHoursChanged { get; set; }

    private MudTextField<string> NewLocationTextField { get; set; }

    // Variables & methods to add a new entry
    private string? _newWorkLocation { get; set; }
    private float? _newSuggestedHours { get; set; }

    private async Task AddNewWorkLocationHoursEntry()
    {
        // TODO: Change from this to the plus button only becoming active once we have input in both variables
        if (_newWorkLocation != null && _newSuggestedHours != null)
        {
            var newLocation = new WorkLocation()
                {
                    LocationName = _newWorkLocation,
                    SuggestedHours = _newSuggestedHours
                };

            // Add entry to database
            var response = await dataService.SaveWorkLocation(newLocation);
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Couldn't create location, please try again.", Severity.Error);
                return;
            }
            newLocation = JsonSerializer.Deserialize<WorkLocation>(await response.Content.ReadAsStringAsync());

            // Add new entry & clear inputs
            workLocationHours.Add(newLocation);

            NewLocationTextField.Clear();
            _newSuggestedHours = null;

            // Update parent component
            WorkLocationHoursChanged.InvokeAsync(workLocationHours);
            Snackbar.Add("Success! Location created.", Severity.Success);
        }
    }

    private async Task DeleteWorkLocationHoursEntry(WorkLocation location)
    {
        try
        {
            var response = await dataService.DeleteWorkLocationHours(location.Id);
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Failed to delete location '{location.LocationName}'.");
            }
            workLocationHours.Remove(location);
            WorkLocationHoursChanged.InvokeAsync(workLocationHours);

            Snackbar.Add("Success! Location deleted.", Severity.Success);
        }
        catch
        {
            Snackbar.Add($"Couldn't delete location '{location.LocationName}'. You cannot delete locations if they're referenced on an entry.", Severity.Error);
        }
    }
}