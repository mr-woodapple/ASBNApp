@inherits LayoutComponentBase

@using ASBNApp.Frontend.Services;

@inject LayoutService layoutService;
@inject NavigationManager navigationManager;
@inject AuthenticationStateProvider authenticationStateProvider

<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="layoutService.IsDarkMode" Theme="layoutService.mudTheme" ObserveSystemThemeChange="layoutService.ObserveSystemThemeChange" IsDarkModeChanged="layoutService.SetDarkMode" />
<MudPopoverProvider />
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>ASBNApp</PageTitle>


<MudLayout>
    <NavBar />
    <MudMainContent>
        <CascadingAuthenticationState>
            @if (!_isLoading)
            {
                @Body
            }
            else
            {
                <CheckingAuthentication />
            }
        </CascadingAuthenticationState>
    </MudMainContent>
</MudLayout>



@code{
    private bool _isLoading = true;
    private MudThemeProvider _mudThemeProvider;

    /// <summary>
    /// Redirect the user to the login page if he's not logged in.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        layoutService.MajorUpdateOccurred += LayoutServiceOnMajorUpdateOccured;

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            // Redirect if user is on index page, but authenticated
            if (navigationManager.Uri.EndsWith("/"))
            {
                navigationManager.NavigateTo("/app");
            }
        }
        else
        {
            // Redirect if user is on a protected page, but not authenticated
            if (navigationManager.Uri.EndsWith("/login") || navigationManager.Uri.EndsWith("/register") || navigationManager.Uri.EndsWith("/")) { } 
            else
            {
                navigationManager.NavigateTo("/");
            }
        }

        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task ApplyUserPreferences()
    {
        var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await layoutService.ApplyUserPreferences(defaultDarkMode);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await layoutService.OnSystemPreferenceChanged(newValue);
    }

    public void Dispose()
    {
        layoutService.MajorUpdateOccurred -= LayoutServiceOnMajorUpdateOccured;
    }

    private void LayoutServiceOnMajorUpdateOccured(object sender, EventArgs e) => StateHasChanged();
}