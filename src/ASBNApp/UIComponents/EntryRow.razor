@* UI bit that represents a single entry, supposed to be used in MainViewWeek. *@

@using ASBNApp.Model;
@inject IASBNDataService dataService;

<MudPaper Outlined="true" Class="pa-5 ma-5">
    <MudGrid>
        @* Name of the day *@
        <MudItem xs="3">
            <MudText Typo="Typo.h4"> @Entry.Date.DayOfWeek </MudText>
        </MudItem>

        @* Date picker *@
        <MudItem xs="3">
            <MudDatePicker Label="Date" @bind-Date="date" MinDate="@_minDateValue" MaxDate="@_maxDateValue" />
        </MudItem>

        @* Location selector *@
        <MudItem xs="3">
            @if (dataService.GetWorkLocationHours().Count != 0) 
            {
                <MudSelect T="string" Label="Select Location" @bind-Value="Entry.Location" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var entry in dataService.GetWorkLocationHours())
                    {
                        <MudSelectItem Value="@entry.Location"  OnClick="@UpdateWorkHoursFromLocation"/>
                    }                    
                </MudSelect>
            }
            else 
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                    No data available, please add new work location in settings.
                </MudAlert>
            }
        </MudItem>

        @* Location hours input *@
        <MudItem xs="3">
            <MudNumericField @bind-Value="Entry.Hours" Label="Select hours"/>
        </MudItem>

        @* Text *@
        <MudItem xs="12">
            <MudTextField T="string" @bind-Text="Entry.Note" Label="And I learned this today:" Lines="3" />
        </MudItem>
    </MudGrid>
</MudPaper>


@* OLD STUFF  *@
@* <div class="row mb-3">


    <div class="col-2 me-4 entry-row entry-row-date align-items-center justify-content-between">
        <p class="m-0"> @Entry.Date.DayOfWeek,</p>
        <input type="date" id="date" aria-label="Select date for this entry." @bind="Entry.Date" min="@_minDateValue" max="@_maxDateValue" />
    </div>

    <div class="col me-4 p-0 entry-row entry-row-note">
        <div class="form-group">
            <textarea class="form-control" rows="2" id="notes"
                placeholder="I learned this..." @bind="Entry.Note"></textarea>
        </div>
    </div>

    <div class="col-2 me-4 entry-row entry-row-location align-items-center overflow-auto">

        <div class="row row-cols-1">
            <div class="col">
                
                <div class="select-location-dropdown">
                    <select name="work-location" id="work-location" aria-label="Select your work location." 
                        @bind="Entry.Location" @onclick="UpdateWorkHoursFromLocation">
                        <option value="" disabled selected >Select location:</option>

                        @if (dataService.GetWorkLocationHours().Count != 0)
                        {
                            @foreach (var entry in dataService.GetWorkLocationHours())
                            {
                                <option value="@entry.Location"> @entry.Location</option>
                            }
                        }
                        else
                        {
                            <option value="" disabled>
                                No data available, please add a new work location entry in settings.
                            </option>
                        }

                    </select>
                </div>
            </div>

            <div class="col entry-row-hours">
                <input type="number" class="input-underline-workhours" @bind="Entry.Hours" placeholder="Add hours"/>
            </div>
            
        </div>
    </div>
</div> *@



@code {
    // Dealing with two way binding
    [Parameter]
    public EntryRowModel Entry { get; set; }

    [Parameter]
    public EventCallback<EntryRowModel> OnUpdate { get; set; }

    // Week & year variables to set min and max values for the date picker
    private int? _selectedWeek;
    [Parameter]
    public int? SelectedWeek
    {
        get => _selectedWeek;
        set
        {
            _selectedWeek = value;
            UpdateMinMaxDates();
        }
    }

    private int? _selectedYear;
    [Parameter]
    public int? SelectedYear
    {
        get => _selectedYear;
        set
        {
            _selectedYear = value;
            UpdateMinMaxDates();
        }
    }

    private DateTime? _date;
    private DateTime? date 
    { 
        get => _date; 
        set 
        {
            _date = value;
            Entry.Date = (DateTime)value;
        }
    }
    DateHandler dateHandler = new DateHandler();

    // Min & max values
    private DateTime? _minDateValue;
    private DateTime? _maxDateValue;

    protected override void OnInitialized()
    {
        UpdateMinMaxDates();
        UpdateWorkHoursFromLocation();
    }

    /// <summary>
    /// Updates min and max dates for the date picker in a given week
    /// </summary>
    private void UpdateMinMaxDates()
    {
        if (SelectedWeek != null && SelectedYear != null)
        {
            date = Entry.Date;

            // set values for min and max in the date picker
            _minDateValue = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
            _maxDateValue = dateHandler.GetLastDateOfWeek((int)SelectedWeek, (int)SelectedYear);
        }
    }

    /// <summary>
    /// Pre-define the hours value for input UI fields based on the selected work location.
    ///
    /// Filter list for the matching string in SelectedLocation, then set corresponding hours value to Hours
    /// </summary>
    public void UpdateWorkHoursFromLocation() {
        foreach (var item in dataService.GetWorkLocationHours()) {
            if(item.Location == Entry.Location) {
                Entry.Hours = item.Hours;
                StateHasChanged();
            }
        }
    }
}