@*
Component to show location & working hours for all entries of WorkLocationHours,
also manage editing states & update parent component if necessary
*@

@using ASBNApp.Model;

<div class="container">
    @foreach (var entry in WorkLocationHours)
    {
        <div class="row mb-2">
            @if (_isEditingList[entry.Location])
            {
                @* edit text mode *@
                <div class="col-5">
                    <input @bind="@entry.Location" class="input-underline p-1" placeholder="Work Location" />
                </div>
                <div class="col-2">
                    <input @bind="@entry.Hours" class="input-underline p-1" placeholder="Hours" />
                </div>
                <div class="col-1">
                    <span class="btn p-0 material-symbols-rounded"
                        @onclick="@(async e => { 
                            // TODO: How to make editing an entry work? Seems to refresh before updating my dict
                            // See issue #28 for more info
                            await RebuildIsEditing();
                            _isEditingList[entry.Location] = false; 
                            await WorkLocationHoursChanged.InvokeAsync(WorkLocationHours);
                         })">
                         <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="m382-354 339-339q12-12 28.5-12t28.5 12q12 12 12 28.5T778-636L410-268q-12 12-28 12t-28-12L182-440q-12-12-11.5-28.5T183-497q12-12 28.5-12t28.5 12l142 143Z"/></svg>
                    </span>
                </div>
            }
            else
            {
                @* show text mode *@
                <div class="col-5">
                    <div class="show-text">
                        <p class="m-0 p-1 px-2"> @entry.Location </p>
                    </div>
                </div>
                <div class="col-2">
                    <div class="show-text">
                        <p class="m-0 p-1 px-2"> @entry.Hours Hours </p>
                    </div>
                </div>
                <div class="col-1">
                    @* Set focus to the input above *@
                    <span tabindex="0" class="btn p-0 material-symbols-rounded"
                        @onclick="@(e => { _isEditingList[entry.Location] = true; })">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M200-200h57l391-391-57-57-391 391v57Zm-40 80q-17 0-28.5-11.5T120-160v-97q0-16 6-30.5t17-25.5l505-504q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L313-143q-11 11-25.5 17t-30.5 6h-97Zm600-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z" /></svg>
                    </span>
                    <span tabindex="0" class="btn p-0 material-symbols-rounded"
                        @onclick="@(e => { DeleteWorkLocationHoursEntry(entry); })">
                        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M280-120q-33 0-56.5-23.5T200-200v-520q-17 0-28.5-11.5T160-760q0-17 11.5-28.5T200-800h160q0-17 11.5-28.5T400-840h160q17 0 28.5 11.5T600-800h160q17 0 28.5 11.5T800-760q0 17-11.5 28.5T760-720v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM400-280q17 0 28.5-11.5T440-320v-280q0-17-11.5-28.5T400-640q-17 0-28.5 11.5T360-600v280q0 17 11.5 28.5T400-280Zm160 0q17 0 28.5-11.5T600-320v-280q0-17-11.5-28.5T560-640q-17 0-28.5 11.5T520-600v280q0 17 11.5 28.5T560-280ZM280-720v520-520Z" /></svg>
                    </span>
                </div>
            }

        </div>
    }

    @* Add additional row to let the user add data *@
    <div class="row">
        <div class="col-5">
            <input @bind="_newWorkLocation" class="input-underline" placeholder="Add new work location" />
        </div>
        <div class="col-2">
            <input @bind="_newWorkHours" class="input-underline" placeholder="Add hours" />
        </div>
        <div class="col-1">
            <span tabindex="0" class="btn p-0 material-symbols-rounded"
                @onclick="@(e => { AddNewWorkLocationHoursEntry(); })">
                <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M440-440H240q-17 0-28.5-11.5T200-480q0-17 11.5-28.5T240-520h200v-200q0-17 11.5-28.5T480-760q17 0 28.5 11.5T520-720v200h200q17 0 28.5 11.5T760-480q0 17-11.5 28.5T720-440H520v200q0 17-11.5 28.5T480-200q-17 0-28.5-11.5T440-240v-200Z" /></svg>
            </span>
        </div>
    </div>


</div>


@code {
    // TODO: Check if this is the smartest way
    // Bool values on the editing state for all WorkLocationHours entries
    private Dictionary<string, bool> _isEditingList = new Dictionary<string, bool>();

    // create list with entries on initializion, store values for true and false in here
    protected override void OnInitialized()
    {
        foreach (var entry in WorkLocationHours)
        {
            _isEditingList.Add(entry.Location, false);
        }
    }


    // Two way binding
    [Parameter]
    public List<WorkLocationHours>? WorkLocationHours { get; set; }
    [Parameter]
    public EventCallback<List<WorkLocationHours>?> WorkLocationHoursChanged { get; set; }

    // variables & methods to add a new entry
    private string? _newWorkLocation { get; set; }
    private float? _newWorkHours { get; set; }

    private void AddNewWorkLocationHoursEntry()
    {
        // TODO: Change from this to the plus button only becoming active once we have input in both variables
        if (_newWorkLocation != null && _newWorkHours != null)
        {
            // add new entry
            WorkLocationHours.Add(new WorkLocationHours()
                {
                    Location = _newWorkLocation,
                    Hours = _newWorkHours
                });

            // update _isEditingList
            _isEditingList.Add(_newWorkLocation, false);

            // update parent component
            WorkLocationHoursChanged.InvokeAsync(WorkLocationHours);
        }
        else 
        {
            Console.WriteLine("Add something to both inputs before trying to add the entry!");
        }
    }

    private void DeleteWorkLocationHoursEntry(WorkLocationHours entry)
    {
        WorkLocationHours.Remove(entry);
        WorkLocationHoursChanged.InvokeAsync(WorkLocationHours);
    }

    // Rebuild the isEditing dict, required after changing the key on one an entry
    // TODO: Seems wasteful with computing, better solution available?
    private Task RebuildIsEditing() {
        _isEditingList.Clear();
        foreach (var entry in WorkLocationHours)
        {
            _isEditingList.Add(entry.Location, false);
        }
        return Task.CompletedTask;
    }

}