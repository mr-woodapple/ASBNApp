@* Component to show location & working hours for all entries of WorkLocationHours,
also manage editing states & update parent component if necessary. *@

@using ASBNApp.Model;


<MudPaper Elevation="0" Class="mb-5">

    <MudGrid>
        @foreach(var entry in WorkLocationHours)
        {
            <MudItem xs="7">
                <MudTextField @bind-Value="entry.Location" Label="Work location:" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="@entry.Hours" Variant="Variant.Outlined" Label="Working hours:" Min="0" Format="N1" />
            </MudItem>
            <MudItem xs="1">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => DeleteWorkLocationHoursEntry(entry))" />
            </MudItem>
        }

        @* Additional rows to add data: *@
        <MudItem xs="7">
            <MudTextField @ref=NewLocationTextField @bind-Value="_newWorkLocation" Label="Add new work location..." />
        </MudItem>
        <MudItem xs="4">
            <MudNumericField @bind-Value="_newWorkHours" Variant="Variant.Text" Label="Add hours..." Min="0" Format="N1" />
        </MudItem>
        <MudItem xs="1">
            <MudIconButton Icon="@Icons.Material.Rounded.Add" aria-label="delete" OnClick="AddNewWorkLocationHoursEntry" />
        </MudItem>
    </MudGrid>

</MudPaper>


@code {
    // Two way binding
    [Parameter]
    public List<WorkLocationHours>? WorkLocationHours { get; set; }
    [Parameter]
    public EventCallback<List<WorkLocationHours>?> WorkLocationHoursChanged { get; set; }

    // Text field ref
    private MudTextField<string> NewLocationTextField { get; set; }

    // Variables & methods to add a new entry
    private string? _newWorkLocation { get; set; }
    private float? _newWorkHours { get; set; }

    private void AddNewWorkLocationHoursEntry()
    {
        // TODO: Change from this to the plus button only becoming active once we have input in both variables
        if (_newWorkLocation != null && _newWorkHours != null)
        {
            // Add new entry & clear inputs
            WorkLocationHours.Add(new WorkLocationHours()
            {
                Location = _newWorkLocation,
                Hours = _newWorkHours
            });

            NewLocationTextField.Clear();
            _newWorkHours = null;

            // Update parent component
            WorkLocationHoursChanged.InvokeAsync(WorkLocationHours);
        }
        else 
        {
            Console.WriteLine("Add something to both inputs before trying to add the entry!");
        }
    }

    private void DeleteWorkLocationHoursEntry(WorkLocationHours entry)
    {
        WorkLocationHours.Remove(entry);
        WorkLocationHoursChanged.InvokeAsync(WorkLocationHours);
    }
}