@*  Simple selector component for dates, shows today and tomorrow, as well as a date picker. *@

<MudStack Row="true">
    <MudPaper Elevation="0">
        <MudChipSet @bind-SelectedChip="selectedChip" Filter="true" Mandatory="true" >
            <MudChip Text="today" Color="Color.Primary" Default="true"
                @onclick="@(e => { SelectedDate = DateTime.Today; SelectedDateChanged.InvokeAsync(SelectedDate); })">
                Today (@Today.Date.ToString("dd.MM.yyyy"))
            </MudChip>
            <MudChip Text="tomorrow" Color="Color.Primary"
                @onclick="@(e => { SelectedDate = DateTime.Today.AddDays(1); SelectedDateChanged.InvokeAsync(SelectedDate); })">
                Tomorrow (@Tomorrow.Date.ToString("dd.MM.yyyy"))
            </MudChip>
            <MudChip Text="customdate" Color="Color.Primary">Pick custom date</MudChip>
        </MudChipSet>
    </MudPaper>
    
    <MudPaper Elevation="0" Class="mt-n5">
        @if(selectedChip != null && selectedChip.Text == "customdate") {
            <MudDatePicker Label="Select custom date:" 
                DateChanged="@(e => { SelectedDate = (DateTime)e; SelectedDateChanged.InvokeAsync(SelectedDate); })" />
        }
    </MudPaper>
</MudStack>


@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }
    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; }

    private MudChip selectedChip;
    private DateTime Today = DateTime.Now;
    private DateTime Tomorrow = DateTime.Now.AddDays(1);

    // Using this to force-update the SelecteDate in MainViewDay (couldn't get
    // existing values to load otherwise)
    protected override void OnInitialized()
    {
        SelectedDateChanged.InvokeAsync(DateTime.Today);
    }
}