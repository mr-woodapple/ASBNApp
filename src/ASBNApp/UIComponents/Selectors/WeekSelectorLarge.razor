@* Large picker to select the week we want to edit. *@

<MudItem>
    <MudStack Row="true">
        <MudText>Selected Week: @SelectedWeek, @SelectedYear</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Primary" OnClick="OpenDatePickerOverlay" />
    </MudStack>

    <MudOverlay @bind-Visible="isDatePickerOverlayVisible" DarkBackground="true" AutoClose="true">
        <MudDatePicker PickerVariant="PickerVariant.Static" Date="@(DateTime.Today.AddDays(1))" />
    </MudOverlay>
</MudItem>

@* <MudItem>
    <MudText>Selected Week: @SelectedWeek, @SelectedYear</MudText>
    <MudDatePicker @ref="_picker" ShowWeekNumbers="true" @bind-Date="date" AutoClose="true" 
        Label="Select a date to select the full week" 
        HelperText="Simply select a date, the app will match the week to the date.">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => SetPickerToCurrentWeek())">Current Week</MudButton>
        </PickerActions>
    </MudDatePicker>
</MudItem> *@


@* OLD STUFF  *@
@* <div class="row my-4 mx-0 justify-content-center">

    <div class="col-auto week-change-button mb-2" @onclick="SelectPreviousWeek">
        <p class="m-0 material-symbols-rounded align-self-center"> 
            <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="m432-480 156 156q11 11 11 28t-11 28q-11 11-28 11t-28-11L348-452q-6-6-8.5-13t-2.5-15q0-8 2.5-15t8.5-13l184-184q11-11 28-11t28 11q11 11 11 28t-11 28L432-480Z" /></svg>
        </p>
    </div>

    <div class="col-auto px-3 mx-3 mb-2 text-center week-change-center">
        <label for="week">Select week:</label>
        @* TODO: @onfocusout might not be the best idea, there might be a better way to do this *@
        @*
        <input type="week" id="week" @bind="_weekFormatInput" @onfocusout="UpdateWeekFromSelector" />
    </div>

    <div class="col-auto week-change-button mb-2" @onclick="SelectNextWeek">
        <p class="m-0 material-symbols-rounded align-self-center">
            <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M504-480 348-636q-11-11-11-28t11-28q11-11 28-11t28 11l184 184q6 6 8.5 13t2.5 15q0 8-2.5 15t-8.5 13L404-268q-11 11-28 11t-28-11q-11-11-11-28t11-28l156-156Z" /></svg>
        </p>
    </div>

</div>  *@


@code {
    //Two way binding paramters
    [Parameter]
    public int? SelectedWeek { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedWeekChanged { get; set; }
    [Parameter]
    public int? SelectedYear { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedYearChanged { get; set; }

    // Callback function
    [Parameter]
    public Func<Task> OnCallback { get; set; }


    // NEW Date Picker stuff
    private bool isDatePickerOverlayVisible;
    public void OpenDatePickerOverlay()
    {
        isDatePickerOverlayVisible = true;
        StateHasChanged();
    }


    // date picker stuff
    MudDatePicker _picker;
    DateTime? _date;
    DateTime? date 
    { 
        get => _date;
        set {
            _date = value;
            DateTime validDate = (DateTime)value;
            SelectedWeek = dateHandler.GetWeekOfYear(validDate);
            SelectedYear = validDate.Year;
            TriggerAllCallbacks();
        }
    }


    DateHandler dateHandler = new DateHandler();
    private string? _weekFormatInput = null;

    // Use onInitialized() to assign calculated values to the matching variables, avoids data not being loaded into memory
    // Also make sure to update the week number on the parent component
    protected override void OnInitialized()
    {
        SelectedWeek = dateHandler.GetCurrentWeekOfYear();
        SelectedYear = DateTime.Now.Year;
        TriggerAllCallbacks();

        // Set value for the date picker
        date = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
    }

    // Single place to trigger the callbacks
    public async void TriggerAllCallbacks()
    {
        await SelectedWeekChanged.InvokeAsync(SelectedWeek);
        await SelectedYearChanged.InvokeAsync(SelectedYear);
        // Callback to the parent component
        await OnCallback.Invoke();
    }

    public void SetPickerToCurrentWeek() {
        _picker.Close();
        date = DateTime.Now;
    }


    // Updates the week number and the formatted week number for the selector
    // Take into account that we need to switch from 52 to 1 on week numbers and
    // to the next/previous year
    // Also update the binded values
    public void SelectNextWeek()
    {
        if (SelectedWeek == 52)
        {
            SelectedWeek = 1;
            SelectedYear++;
        }
        else
        {
            SelectedWeek++;
        }

        TriggerAllCallbacks();
        // TODO: Add method that updates the datepicker
    }

    public void SelectPreviousWeek()
    {
        if (SelectedWeek == 01)
        {
            SelectedWeek = 52;
            SelectedYear--;
        }
        else
        {
            SelectedWeek--;
        }

        TriggerAllCallbacks();
        // TODO: Add method that updates the datepicker
    }
}